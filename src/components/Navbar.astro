---
import { Zap, Menu, X, Sun, Moon } from 'lucide-react';

const currentPath = Astro.url.pathname;

const navigation = [
  { name: 'Home', href: '/' },
  { name: 'Our Products', href: '/products' },
  { name: 'Our Services', href: '/services' },
  { name: 'About Us', href: '/about' },
  { name: 'Contact Us', href: '/contact' },
];

const isActive = (path: string) => currentPath === path;
---

<nav class="fixed top-0 w-full z-50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-700">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo -->
      <a href="/" class="flex items-center space-x-2 group" aria-label="SPSLabs Home">
        <div class="group-hover:scale-110 transition-transform duration-300">
          <img
            id="logo-light"
            src="/SPSLABS_LOGO_Light.png"
            alt="SPSLabs"
            class="h-10 w-auto dark:hidden"
            width="40"
            height="40"
          />
          <img
            id="logo-dark"
            src="/SPS_LABS_LOGO_Dark.png"
            alt="SPSLabs"
            class="h-10 w-auto hidden dark:block"
            width="40"
            height="40"
          />
        </div>
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex space-x-8">
        {navigation.map((item) => (
          <a
            href={item.href}
            class={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-300 ${
              isActive(item.href)
                ? 'text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20'
                : 'text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-50 dark:hover:bg-gray-800'
            }`}
            aria-current={isActive(item.href) ? 'page' : undefined}
          >
            {item.name}
          </a>
        ))}
      </div>

      <!-- Theme Toggle & Mobile Menu -->
      <div class="flex items-center space-x-4">
        <button
          id="theme-toggle"
          class="p-2 rounded-lg bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-300"
          aria-label="Toggle theme"
        >
          <Sun class="h-5 w-5 text-yellow-500 dark:hidden" />
          <Moon class="h-5 w-5 text-gray-600 hidden dark:block" />
        </button>

        <!-- Mobile menu button -->
        <button
          id="mobile-menu-button"
          class="md:hidden p-2 rounded-lg bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-300"
          aria-label="Toggle mobile menu"
          aria-expanded="false"
        >
          <Menu class="h-5 w-5 text-gray-600 dark:text-gray-300" id="menu-icon" />
          <X class="h-5 w-5 text-gray-600 dark:text-gray-300 hidden" id="close-icon" />
        </button>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="md:hidden py-4 border-t border-gray-200 dark:border-gray-700 hidden">
      <div class="space-y-2">
        {navigation.map((item) => (
          <a
            href={item.href}
            class={`block px-3 py-2 rounded-lg text-base font-medium transition-all duration-300 ${
              isActive(item.href)
                ? 'text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20'
                : 'text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-50 dark:hover:bg-gray-800'
            }`}
            aria-current={isActive(item.href) ? 'page' : undefined}
          >
            {item.name}
          </a>
        ))}
      </div>
    </div>
  </div>
</nav>

<script>
  // Theme toggle functionality
  const themeToggle = document.getElementById('theme-toggle');
  const html = document.documentElement;
  
  // Check for saved theme preference or default to system preference
  const savedTheme = localStorage.getItem('theme');
  const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  const currentTheme = savedTheme || systemTheme;
  
  if (currentTheme === 'dark') {
    html.classList.add('dark');
  }
  
  themeToggle?.addEventListener('click', () => {
    html.classList.toggle('dark');
    const isDark = html.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  });

  // Mobile menu functionality
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const menuIcon = document.getElementById('menu-icon');
  const closeIcon = document.getElementById('close-icon');
  
  mobileMenuButton?.addEventListener('click', () => {
    const isOpen = !mobileMenu?.classList.contains('hidden');
    
    if (isOpen) {
      mobileMenu?.classList.add('hidden');
      menuIcon?.classList.remove('hidden');
      closeIcon?.classList.add('hidden');
      mobileMenuButton.setAttribute('aria-expanded', 'false');
    } else {
      mobileMenu?.classList.remove('hidden');
      menuIcon?.classList.add('hidden');
      closeIcon?.classList.remove('hidden');
      mobileMenuButton.setAttribute('aria-expanded', 'true');
    }
  });

  // Close mobile menu when clicking on a link
  const mobileLinks = mobileMenu?.querySelectorAll('a');
  mobileLinks?.forEach(link => {
    link.addEventListener('click', () => {
      mobileMenu?.classList.add('hidden');
      menuIcon?.classList.remove('hidden');
      closeIcon?.classList.add('hidden');
      mobileMenuButton?.setAttribute('aria-expanded', 'false');
    });
  });
</script>