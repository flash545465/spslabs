---
// Animated Background Component
---

<div class="fixed inset-0 -z-10 overflow-hidden">
  <!-- Enhanced Gradient Background -->
  <div class="absolute inset-0 bg-gradient-to-br from-blue-50/80 via-white/90 to-teal-50/80 dark:from-black/95 dark:via-gray-900/98 dark:to-black/95 transition-colors duration-300"></div>
  
  <!-- 3D Canvas with enhanced visibility -->
  <canvas
    id="animated-canvas"
    class="absolute inset-0 opacity-80 dark:opacity-60"
    style="mix-blend-mode: multiply;"
  ></canvas>
  
  <!-- Enhanced floating geometric shapes -->
  <div class="absolute inset-0">
    <div class="absolute top-1/4 left-1/4 w-96 h-96 bg-blue-200/20 dark:bg-blue-500/10 rounded-full blur-3xl animate-pulse"></div>
    <div class="absolute bottom-1/4 right-1/4 w-80 h-80 bg-teal-200/20 dark:bg-teal-500/10 rounded-full blur-3xl animate-pulse" style="animation-delay: 1s;"></div>
    <div class="absolute top-1/2 right-1/3 w-64 h-64 bg-purple-200/20 dark:bg-purple-500/10 rounded-full blur-3xl animate-pulse" style="animation-delay: 2s;"></div>
    <div class="absolute bottom-1/3 left-1/5 w-72 h-72 bg-orange-200/15 dark:bg-orange-500/8 rounded-full blur-3xl animate-pulse" style="animation-delay: 3s;"></div>
    
    <!-- Enhanced geometric shapes -->
    <div class="absolute top-20 left-20 w-6 h-6 bg-blue-400/30 dark:bg-blue-300/20 rotate-45 animate-spin" style="animation-duration: 20s;"></div>
    <div class="absolute bottom-20 right-20 w-8 h-8 bg-teal-400/30 dark:bg-teal-300/20 rotate-45 animate-spin" style="animation-duration: 15s;"></div>
    <div class="absolute top-1/2 left-10 w-4 h-4 bg-purple-400/30 dark:bg-purple-300/20 rounded-full animate-bounce" style="animation-delay: 1s;"></div>
    <div class="absolute bottom-1/3 left-1/3 w-5 h-5 bg-orange-400/30 dark:bg-orange-300/20 rotate-45 animate-pulse"></div>
    <div class="absolute top-1/3 right-20 w-3 h-3 bg-pink-400/30 dark:bg-pink-300/20 rounded-full animate-ping" style="animation-delay: 2s;"></div>
    <div class="absolute bottom-1/2 left-1/2 w-7 h-7 bg-green-400/25 dark:bg-green-300/15 rotate-45 animate-spin" style="animation-duration: 25s;"></div>
  </div>

  <!-- Enhanced floating particles -->
  <div class="absolute inset-0">
    {Array.from({ length: 40 }).map((_, i) => (
      <div
        key={i}
        class="absolute w-1.5 h-1.5 bg-blue-400/40 dark:bg-blue-300/30 rounded-full animate-ping"
        style={{
          left: `${Math.random() * 100}%`,
          top: `${Math.random() * 100}%`,
          animationDelay: `${Math.random() * 5}s`,
          animationDuration: `${3 + Math.random() * 3}s`,
        }}
      />
    ))}
  </div>

  <!-- Additional animated elements -->
  <div class="absolute inset-0">
    {Array.from({ length: 15 }).map((_, i) => (
      <div
        key={`extra-${i}`}
        class="absolute w-2 h-2 bg-gradient-to-r from-blue-400/20 to-teal-400/20 dark:from-blue-300/15 dark:to-teal-300/15 rounded-full animate-pulse"
        style={{
          left: `${Math.random() * 100}%`,
          top: `${Math.random() * 100}%`,
          animationDelay: `${Math.random() * 4}s`,
          animationDuration: `${4 + Math.random() * 2}s`,
        }}
      />
    ))}
  </div>
</div>

<script>
  // 3D Particle Animation
  const canvas = document.getElementById('animated-canvas') as HTMLCanvasElement;
  if (canvas) {
    const ctx = canvas.getContext('2d');
    if (ctx) {
      // Set canvas size
      const resizeCanvas = () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
      };
      resizeCanvas();
      window.addEventListener('resize', resizeCanvas);

      // Particle system
      const particles: Array<{
        x: number;
        y: number;
        z: number;
        vx: number;
        vy: number;
        vz: number;
        size: number;
        color: string;
        opacity: number;
      }> = [];

      // Create particles
      for (let i = 0; i < 120; i++) {
        particles.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          z: Math.random() * 1000,
          vx: (Math.random() - 0.5) * 0.8,
          vy: (Math.random() - 0.5) * 0.8,
          vz: (Math.random() - 0.5) * 3,
          size: Math.random() * 4 + 1,
          color: ['#3b82f6', '#8b5cf6', '#14b8a6', '#f59e0b', '#ef4444'][Math.floor(Math.random() * 5)],
          opacity: Math.random() * 0.7 + 0.2
        });
      }

      // Animation loop
      const animate = () => {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        particles.forEach((particle, index) => {
          // Update position
          particle.x += particle.vx;
          particle.y += particle.vy;
          particle.z += particle.vz;

          // 3D projection
          const scale = 1000 / (1000 + particle.z);
          const x2d = particle.x * scale + canvas.width / 2;
          const y2d = particle.y * scale + canvas.height / 2;

          // Wrap around edges
          if (particle.x > canvas.width / 2) particle.x = -canvas.width / 2;
          if (particle.x < -canvas.width / 2) particle.x = canvas.width / 2;
          if (particle.y > canvas.height / 2) particle.y = -canvas.height / 2;
          if (particle.y < -canvas.height / 2) particle.y = canvas.height / 2;
          if (particle.z > 1000) particle.z = -1000;
          if (particle.z <= -1000) particle.z = 1000;

          // Draw particle
          ctx.save();
          ctx.globalAlpha = particle.opacity * scale;
          ctx.fillStyle = particle.color;
          ctx.beginPath();
          ctx.arc(x2d, y2d, Math.max(0, particle.size * scale), 0, Math.PI * 2);
          ctx.fill();
          ctx.restore();

          // Draw connections
          particles.forEach((otherParticle, otherIndex) => {
            if (index !== otherIndex) {
              const dx = particle.x - otherParticle.x;
              const dy = particle.y - otherParticle.y;
              const distance = Math.sqrt(dx * dx + dy * dy);

              if (distance < 120) {
                const otherScale = 1000 / (1000 + otherParticle.z);
                const otherX2d = otherParticle.x * otherScale + canvas.width / 2;
                const otherY2d = otherParticle.y * otherScale + canvas.height / 2;

                ctx.save();
                ctx.globalAlpha = (1 - distance / 120) * 0.15 * Math.min(scale, otherScale);
                ctx.strokeStyle = particle.color;
                ctx.lineWidth = 0.8;
                ctx.beginPath();
                ctx.moveTo(x2d, y2d);
                ctx.lineTo(otherX2d, otherY2d);
                ctx.stroke();
                ctx.restore();
              }
            }
          });
        });

        requestAnimationFrame(animate);
      };

      animate();
    }
  }
</script>